// file: minunit.h
#include <stdio.h>

// housekeeping stats

int mu_tests_run = 0;
int mu_tests_ok = 0;
int mu_tests_nok = 0;

// last test function seen
const char *MU_FUNC=NULL;

// complain and update stats
#define MU_FAIL(fmt, ...) \
    do { \
        mu_tests_run++; mu_tests_nok++; \
        printf("%s:%d: %s - ", __FILE__, __LINE__, MU_FUNC); \
        printf(fmt, ##__VA_ARGS__);\
        printf("\n"); \
    } while (0);

// be silent, update stats only
#define MU_OK \
    do { mu_tests_run++; mu_tests_ok++; } while (0);

// print stats & return success or failure (at least 1 unit test failed)
#define MU_DONE() \
    do { \
        printf("-------------------------------------\n"); \
        printf("Ran %d tests -> ok (%d), fail (%d)\n\n", \
             mu_tests_run, mu_tests_ok, mu_tests_nok); \
        return (mu_tests_run != mu_tests_ok); \
    } while(0)

// run a test function, after saving its name to MU_FUNC
#define mu_verify(test) \
    do { MU_FUNC = #test; test(); } while(0)

// TEST MACRO's

#define mu_equal(a, b, fmt, ...) \
    do { if (a == b) MU_OK else MU_FAIL(fmt, ##__VA_ARGS__); } while(0)

// note: fmt is format specifier required for complaint string
#define mu_eq(a, b, fmt) \
    do { if (a == b) MU_OK else MU_FAIL("expected " fmt ", got " fmt, a, b); } while(0)

#define mu_assert(exp) \
    do { if (exp) MU_OK else MU_FAIL("assertion error '%s'", #exp)} while (0)

#define mu_true(exp) \
    do { if (exp) MU_OK else MU_FAIL("expected '%s' to be true", #exp)} while (0)

#define mu_false(exp) \
    do { if (exp) MU_FAIL("expected '%s' to be false", #exp) else MU_OK} while (0)

// MU FUNCTIONS

void mu_run_tests(void);   // defined in autogenerated <name>_mu.h
int main(void);    // defined below

// MAIN entry point -> defined here, so test_<name>.c only needs unit tests
int
main(void)
{
    mu_run_tests();
    MU_DONE();
}
