#
# Turn radix.{c,h} into a shared object file
# Link to it from test_radix.c and create test.out
#

#
# Makefile derived from ~/dev/iptable/Makefile (from liblpm)
#

PROJ=ipt

test_cfiles=$(sort $(wildcard test_*.c))
test_hfiles=$(test_cfiles:.c=_mu.h)
test_runners=$(test_cfiles:.c=)

CFLAGS+=	-std=c99 -O2 -g -Wall -Wextra -Werror
CFLAGS+=	-D_POSIX_C_SOURCE=200809L -D_GNU_SOURCE -D_DEFAULT_SOURCE
CFLAGS+=	-fPIC
# CFLAGS+=	-pedantic

# adding -pedantic will fail on radix.c (log macro and rn_delete func)

#
# Extended warning flags.
#

# CFLAGS+=	-Wno-unknown-warning-option # gcc vs clang
CFLAGS+=	-Wstrict-prototypes -Wmissing-prototypes -Wpointer-arith
CFLAGS+=	-Wmissing-declarations -Wredundant-decls -Wnested-externs
CFLAGS+=	-Wshadow -Wcast-qual -Wcast-align -Wwrite-strings
CFLAGS+=	-Wold-style-definition
CFLAGS+=	-Wsuggest-attribute=noreturn -Wjump-misses-init

# LDFLAGS=	-fPIC -shared

LDFLAGS=

all: ${PROJ} test

.PHONY: all clean

#
# C exe build
#

${PROJ}.o: iptable.c
	$(CC) $(CFLAGS) -c iptable.c -o $@

radix.so:
	$(CC) $(CFLAGS) -o radix.so -c radix.c

radix.o:
	$(CC) $(CFLAGS) -o radix.o -c radix.c

${PROJ}: radix.o radix.so iptable.c ${PROJ}.o
	$(CC) $(CFLAGS) -o ${PROJ}.o -c iptable.c
	$(CC) $(LDFLAGS) -o ${PROJ} radix.so ${PROJ}.o

# run valgrind to check for memory leaks

valgrind: ${PROJ}
	valgrind --leak-check=yes ./${PROJ} 1>stdout.txt


clean:
	rm -f *.o *.so stdout.txt ${PROJ} *_mu.h

#
# MINUNIT
#

# run *all* test runners
# - remove the ';' to stop make'ing after a test runner fails

test: $(test_runners)
	@$(foreach test, $(test_runners), ./$(test);)

# `make just_test_<name>', runs a single test_<name>
# - a bit clumsy

$(test_runners:%=just_%): just_%: %
ifdef valgrind
	@valgrind --leak-check=yes ./$<
else
	-./$<
endif

# generate a test runners' test_<name>_mu.h header file
# - this contains generated mu_run_tests() function for the test runner

$(test_hfiles): %_mu.h: %.c
	./mu_header $*

# strip main from x, the test runner provides 'main'

$(test_runners): %: minunit.h %_mu.h %.o ${PROJ}.o radix.so
	strip -N main ${PROJ}.o -o ${PROJ}_stripped.o
	${CC} ${CFLAGS} $@.o ${PROJ}_stripped.o radix.so -o $@


